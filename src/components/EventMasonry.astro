---
const {
  images = [
    { jpg: "/events/masonry/1_scaled.jpg" },
    { jpg: "/events/masonry/2_scaled.jpg" },
    { jpg: "/events/masonry/3_scaled.jpg" },
    { jpg: "/events/masonry/4_scaled.jpg" },
    { jpg: "/events/masonry/5_scaled.jpg" },
    { jpg: "/events/masonry/6_scaled.jpg" },
    { jpg: "/events/masonry/7_scaled.jpg" },
    { jpg: "/events/masonry/8_scaled.jpg" },
    { jpg: "/events/masonry/9_scaled.jpg" },
    { jpg: "/events/masonry/10_scaled.jpg" },
    { jpg: "/events/masonry/11_scaled.jpg" },
    { jpg: "/events/masonry/12_scaled.jpg" },
    { jpg: "/events/masonry/13_scaled.jpg" },
    { jpg: "/events/masonry/14_scaled.jpg" },
    { jpg: "/events/masonry/15_scaled.jpg" },
  ],
} = Astro.props;

const INITIAL_CENTER = 1;
---

<div
  class="relative hidden md:flex items-center justify-center w-full h-[400px] overflow-hidden"
>
  <div id="left-wrapper" class="absolute left-pos hidden lg:block">
    <img
      id="left-image"
      class="object-cover w-[580px] h-[350px] rounded-md shadow-lg"
      src={images[0].jpg}
      alt="Left"
    />
  </div>

  <div id="center-wrapper" class="absolute center-pos">
    <img
      id="center-image"
      class="object-cover w-full md:w-[600px] md:h-[380px] rounded-md shadow-xl"
      src={images[1].jpg}
      alt="Center"
    />
  </div>

  <div id="right-wrapper" class="absolute right-pos hidden lg:block">
    <img
      id="right-image"
      class="object-cover w-[550px] h-[320px] rounded-md shadow-lg"
      src={images[2].jpg}
      alt="Right"
    />
  </div>

  <div class="absolute bottom-0 flex gap-4 z-50">
    <button
      id="prev-btn"
      class="px-4 py-2 border-2 border-white text-white bg-[#171717] bg-opacity-50 rounded hover:bg-white hover:text-black"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
      >
        <path
          fill="currentColor"
          d="M15.41 7.41L14 6l-6 6l6 6l1.41-1.41L10.83 12z"></path>
      </svg>
    </button>
    <button
      id="next-btn"
      class="px-4 py-2 border-2 border-white rotate-180 text-white bg-[#171717] bg-opacity-50 rounded hover:bg-white hover:text-black"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
      >
        <path
          fill="currentColor"
          d="M15.41 7.41L14 6l-6 6l6 6l1.41-1.41L10.83 12z"></path>
      </svg>
    </button>
  </div>
</div>

<div
  id="mobile-gallery"
  class="flex md:hidden overflow-x-auto hidden-scrollbar snap-x snap-mandatory gap-4 p-4"
>
  {
    images.map((img, i) => (
      <img
        key={i}
        src={img.jpg}
        alt={`Image ${i + 1}`}
        class="w-[100vw] snap-center object-cover rounded-md"
      />
    ))
  }
</div>

<style>
  .left-pos {
    transform: translate(-140%, -50%) scale(0.9);
    top: 50%;
    left: 50%;
    z-index: 10;
    opacity: 0.7;
  }
  .center-pos {
    transform: translate(-50%, -50%) scale(1);
    top: 50%;
    left: 50%;
    z-index: 20;
    opacity: 1;
  }
  .right-pos {
    transform: translate(40%, -50%) scale(0.9);
    top: 50%;
    left: 50%;
    z-index: 10;
    opacity: 0.7;
  }
</style>

<script define:vars={{ images, INITIAL_CENTER }}>
  const imagesArray = images;
  let centerIndex = INITIAL_CENTER;
  const total = imagesArray.length;

  const leftImg = document.getElementById("left-image");
  const centerImg = document.getElementById("center-image");
  const rightImg = document.getElementById("right-image");

  function wrapIndex(i) {
    return (i + total) % total;
  }

  function updatePositions() {
    const leftIdx = wrapIndex(centerIndex - 1);
    const rightIdx = wrapIndex(centerIndex + 1);
    leftImg.src = imagesArray[leftIdx].jpg;
    centerImg.src = imagesArray[centerIndex].jpg;
    rightImg.src = imagesArray[rightIdx].jpg;
  }

  function showNext() {
    centerIndex = wrapIndex(centerIndex + 1);
    updatePositions();
  }

  function showPrev() {
    centerIndex = wrapIndex(centerIndex - 1);
    updatePositions();
  }

  let autoSlideTimerDesktop;
  function startAutoSlideDesktop() {
    autoSlideTimerDesktop = setInterval(() => showNext(), 2000);
  }
  function resetAutoSlideDesktop() {
    clearInterval(autoSlideTimerDesktop);
    startAutoSlideDesktop();
  }

  document.getElementById("next-btn").addEventListener("click", () => {
    showNext();
    resetAutoSlideDesktop();
    resetAutoSlideMobile();
  });
  document.getElementById("prev-btn").addEventListener("click", () => {
    showPrev();
    resetAutoSlideDesktop();
    resetAutoSlideMobile();
  });
  window.addEventListener("keydown", (e) => {
    if (e.key === "ArrowRight") {
      showNext();
      resetAutoSlideDesktop();
      resetAutoSlideMobile();
    } else if (e.key === "ArrowLeft") {
      showPrev();
      resetAutoSlideDesktop();
      resetAutoSlideMobile();
    }
  });

  startAutoSlideDesktop();
  updatePositions();

  const mobileGallery = document.getElementById("mobile-gallery");
  let mobileIndex = 0;
  let autoSlideTimerMobile;
  function updateMobileScroll() {
    if (mobileGallery) {
      mobileGallery.scrollTo({
        left: mobileIndex * mobileGallery.clientWidth,
        behavior: "smooth",
      });
    }
  }
  function showNextMobile() {
    mobileIndex = (mobileIndex + 1) % total;
    updateMobileScroll();
  }
  function startAutoSlideMobile() {
    if (mobileGallery) {
      autoSlideTimerMobile = setInterval(() => showNextMobile(), 2000);
    }
  }
  function resetAutoSlideMobile() {
    if (mobileGallery) {
      clearInterval(autoSlideTimerMobile);
      startAutoSlideMobile();
    }
  }
  if (mobileGallery) {
    mobileGallery.addEventListener("touchstart", resetAutoSlideMobile);
    mobileGallery.addEventListener("mousedown", resetAutoSlideMobile);
    mobileGallery.addEventListener("scroll", () => {
      mobileIndex = Math.round(
        mobileGallery.scrollLeft / mobileGallery.clientWidth
      );
      resetAutoSlideMobile();
    });
    startAutoSlideMobile();
  }
</script>
