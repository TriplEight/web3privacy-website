---
import { testimonials as defaultTestimonials } from "../testimonials";

interface Testimonial {
  id: string;
  author: string;
  designation: string;
  reviewText: string;
  imageUrl: string;
}

interface Props {
  testimonials?: Testimonial[];
}

const testimonials = Astro.props.testimonials ?? defaultTestimonials;
const initialShowCount = 10;
const designationColors = [
  "text-red-500",
  "text-blue-500",
  "text-green-500",
  "text-yellow-500",
  "text-purple-500",
  "text-pink-500",
];
---

<div class="mx-auto p-4">
  <div id="review-list" class="columns-1 sm:columns-2 md:columns-3 gap-4"></div>

  {
    testimonials.length > initialShowCount && (
      <button
        id="show-more-btn"
        class="mt-8 block mx-auto text-white border-2 border-white px-4 py-2 transition duration-200 rounded hover:bg-white hover:text-black"
      >
        Show More
      </button>
    )
  }
</div>

<script define:vars={{ testimonials, initialShowCount, designationColors }}>
  let showCount = initialShowCount;
  const reviewList = document.getElementById("review-list");
  const showMoreBtn = document.getElementById("show-more-btn");

  function createReview(item, i) {
    const container = document.createElement("div");
    container.className =
      "mb-4 break-inside-avoid border-2 border-secondary cursor-pointer bg-transparent p-4 transition duration-200 hover:bg-[#171717]";

    const topRow = document.createElement("div");
    topRow.className = "flex items-center gap-4";

    const img = document.createElement("img");
    img.src = item.imageUrl;
    img.alt = item.author;
    img.className = "w-12 h-12 object-cover rounded-full mb-2";

    const h3 = document.createElement("h3");
    h3.className = "font-semibold";
    h3.textContent = item.author;

    topRow.append(img, h3);
    container.appendChild(topRow);

    const designation = document.createElement("p");
    designation.className = `text-sm ${designationColors[i % designationColors.length]}`;
    designation.textContent = item.designation;
    container.appendChild(designation);

    const reviewText = document.createElement("p");
    reviewText.className = "mt-2 text-sm text-secondary";
    reviewText.textContent = item.reviewText;
    container.appendChild(reviewText);

    return container;
  }

  function renderReviews() {
    reviewList.innerHTML = "";
    testimonials.slice(0, showCount).forEach((item, i) => {
      reviewList.appendChild(createReview(item, i));
    });
  }

  renderReviews();

  if (showMoreBtn) {
    showMoreBtn.addEventListener("click", () => {
      showCount += 10;
      renderReviews();
      if (showCount >= testimonials.length) {
        showMoreBtn.remove();
      }
    });
  }
</script>
